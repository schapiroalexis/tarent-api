generator client {
  provider = "prisma-client-js"
  previewFeatures = ["groupBy", "nativeTypes"]

}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Schedule {
  id           Int    @id @default(autoincrement())
  courseId     Int
  course       Course @relation(fields: [courseId], references: [id])
  startDate    DateTime @db.Timestamptz
  endDate      DateTime @db.Timestamptz
  frecuency    String
  availability Int
  mo           String
  tu           String
  we           String
  th           String
  fr           String
  sa           String
  su           String
}

model Course {
  id          Int          @id @default(autoincrement())
  teacherId   Int
  title       String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  description String
  enrollments Enrollment[]
  price       Int          @default(0)
  Schedule    Schedule[]
}

model Teacher {
  id       Int      @id @default(autoincrement())
  fullName String
  email    String
  courses  Course[]
}

model Studentv2 {
  id       Int    @id @default(autoincrement())
  fullName String
  email    String
}

model Student {
  id          Int          @id @default(autoincrement())
  email       String
  fullName    String
  dept        String?
  enrolled    Boolean      @default(false)
  enrollments Enrollment[]
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  courseId  Int?
  studentId Int?
  course    Course?  @relation(fields: [courseId], references: [id])
  student   Student? @relation(fields: [studentId], references: [id])
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String
  posts Post[]
}

model Post {
  authorId  Int?
  content   String?
  id        Int     @id @default(autoincrement())
  published Boolean @default(false)
  title     String
  author    User?   @relation(fields: [authorId], references: [id])
}
